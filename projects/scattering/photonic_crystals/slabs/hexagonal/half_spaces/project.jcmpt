<?
# ----------------------------------- Python -----------------------------------
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# ------------------------------------------------------------------------------

# Set default keys
default_keys = {'info_level' : 10,
                'storage_format' : 'Binary',
                'fem_degree_min' : 1,
                'initial_p_adaption' : True,
                'n_refinement_steps' : 0,
                'refinement_strategy' : 'HAdaptive',
                'clustering_efield_output' : False}
for dkey in default_keys:
	if not dkey in keys:
		keys[dkey] = default_keys[dkey]

# Handle name ambiguities
if 'precision_field_energy' in keys:
    if 'precision' in keys:
        raise ValueError('Name clash with `precision` and ' +
                         '`precision_field_energy`! Use only one of them.')
    keys['precision'] = keys['precision_field_energy']

# ------------------------------------------------------------------------------
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# ------------------------------------------------------------------------------
?>
Project {
  InfoLevel = %(info_level)i
  StorageFormat = %(storage_format)s
  Electromagnetics {
    TimeHarmonic {
      Scattering {
        FieldComponents = Electric
        
        Accuracy {
<? # --------------------------------- Python ----------------------------------
if keys['initial_p_adaption']:
    ?> #------------------------------------------------------------------------
          FiniteElementDegree {
            Adaptive{
              MinimumDegree= %(fem_degree_min)i
              MaximumDegree = %(fem_degree_max)i
            }
          }
<? # --------------------------------- Python ----------------------------------
else:
    ?> #------------------------------------------------------------------------
          FiniteElementDegree = %(fem_degree_max)i
<? # ----------------------- End of python if-statement ------------------------
?>
          Precision = %(precision)e
          Refinement {
            MaxNumberSteps = %(n_refinement_steps)i
            Strategy = %(refinement_strategy)s
          }
        }
        
        PML {
          AnglePreRefinements = 0
        }
      }
    }
  }
}
<?
# ----------------------------------- Python -----------------------------------
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# ------------------------------------------------------------------------------

wvl = keys['vacuum_wavelength']
keys['na_sub'] = keys['mat_subspace'].getNKdata(wvl)
keys['na_super'] = keys['mat_superspace'].getNKdata(wvl)

# ------------------------------------------------------------------------------
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# ------------------------------------------------------------------------------
?>
PostProcess {
  FourierTransform {
    FieldBagPath = "./project_results/fieldbag.jcm"
    OutputFileName = "./project_results/reflected_diffraction_orders.jcm"
    NormalDirection = Z
    Format = JCM-ASCII
    ScatteredFieldOnly = yes
    NumericalAperture = %(na_super)e
  }
}

PostProcess {
  FourierTransform {
    FieldBagPath = "./project_results/fieldbag.jcm"
    OutputFileName = "./project_results/transmitted_diffraction_orders.jcm"
    NormalDirection = -Z
    NumericalAperture = %(na_sub)e
    Format = JCM-ASCII
  }
}

PostProcess {
  DensityIntegration {
    FieldBagPath = "./project_results/fieldbag.jcm"
    OutputFileName = "./project_results/electric_field_energy.jcm"
    OutputQuantity = ElectricFieldEnergy
  }
}


<? # --------------------------------- Python ----------------------------------
if keys['clustering_efield_output']:
    ?> #------------------------------------------------------------------------
PostProcess {
  ExportFields {
    FieldBagPath = "project_results/fieldbag.jcm"
    OutputFileName = "project_results/efield_3D.jcm"
    OutputQuantity = ElectricFieldStrength
    Cartesian {
      Spacing = 4.e-8
    }
  }
}
<? # ----------------------- End of python if-statement ------------------------
?>


<? # --------------------------------- Python ----------------------------------
if 'hex_np_xy' in keys:
    from hex_plane_tools import hex_planes_point_list_for_keys
    keys['hex_points'], _ = hex_planes_point_list_for_keys(keys, plane_indices=[0,3,6])
    ?> #------------------------------------------------------------------------
PostProcess {
  ExportFields {
    FieldBagPath = "project_results/fieldbag.jcm"
    OutputFileName = "project_results/efield_hex_planes.jcm"
    OutputQuantity = ElectricFieldStrength
    PointList {
      Points = %(hex_points)e
    }
  }
}
<? # ----------------------- End of python if-statement ------------------------
if 'hex_also_magnetic' in keys and 'hex_points' in keys:
    if keys['hex_also_magnetic']:
        ?> #--------------------------------------------------------------------
PostProcess {
  ExportFields {
    FieldBagPath = "project_results/fieldbag.jcm"
    OutputFileName = "project_results/hfield_hex_planes.jcm"
    OutputQuantity = MagneticFieldStrength
    PointList {
      Points = %(hex_points)e
    }
  }
}
<? # ----------------------- End of python if-statement ------------------------
?>